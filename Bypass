print("Bypassing...")
task.wait(1) 
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local RunService = game:GetService("RunService")

local oldFireServer = nil
oldFireServer = hookmetamethod(game, "__namecall", function(self, ...)
    local method = getnamecallmethod()
    if method == "FireServer" then
        local args = {...}
        if self == ReplicatedStorage.Remotes and (args[1] == 3 or #args == 0) then
            return nil
        end
    end
    return oldFireServer(self, ...)
end)

local oldIndex = nil
oldIndex = hookmetamethod(game, "__index", function(self, key)
    if self == game and key == "CoreGui" then
        local proxyCoreGui = newproxy(true)
        getmetatable(proxyCoreGui).__index = function(_, k)
            return game.CoreGui[k]
        end
        getmetatable(proxyCoreGui).__newindex = function(_, k, v)
        end
        return proxyCoreGui
    end
    return oldIndex(self, key)
end)

local function blockInfiniteLoops()
    local success, FlyHandler = pcall(require, ReplicatedStorage.Modules.Utils.FlyHandler)
    if success and FlyHandler then
        local oldV_u_12 = rawget(FlyHandler, "v_u_12")
        if oldV_u_12 then
            rawset(FlyHandler, "v_u_12", function()
                return nil
            end)
        end
    end
end


task.spawn(blockInfiniteLoops)

print("Bypassed!")
